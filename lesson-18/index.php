
<h3>1. Сделайте функцию, которая принимает строку на русском языке, а возвращает ее транслит</h3>

<form action="" method="get">
	<input type="text" name="text_1">
	<input type="submit">
</form>

<?php
function exc_html( $data ) {
	return htmlspecialchars( trim( $data ) );
}

function ol_todo_1() {
	if ( ! empty( $_GET['text_1'] ) ) {
		$text         = exc_html( $_GET['text_1'] );
		$arr_text     = preg_split( '//u', $text );
		$res          = '';
		$arr_translit = array(
			'а' => 'a',
			'б' => 'b',
			'в' => 'v',
			'г' => 'g',
			'д' => 'd',
			'е' => 'e',
			'ё' => 'jo',
			'ж' => 'zh',
			'з' => 'z',
			'и' => 'i',
			'й' => 'j',
			'к' => 'k',
			'л' => 'l',
			'м' => 'm',
			'н' => 'n',
			'о' => 'o',
			'п' => 'p',
			'р' => 'r',
			'с' => 's',
			'т' => 't',
			'у' => 'u',
			'ф' => 'f',
			'х' => 'h',
			'ц' => 'cz',
			'ч' => 'ch',
			'ш' => 'sh',
			'щ' => 'shh',
			'ь' => '`',
			'ы' => 'y',
			'ъ' => '``',
			'э' => 'e',
			'ю' => 'yu',
			'я' => 'ya',
			' ' => ' ',
			'А' => 'A',
			'Б' => 'B',
			'В' => 'V',
			'Г' => 'G',
			'Д' => 'D',
			'Е' => 'E',
			'Ё' => 'JO',
			'Ж' => 'ZH',
			'З' => 'Z',
			'И' => 'I',
			'Й' => 'J',
			'К' => 'K',
			'Л' => 'L',
			'М' => 'M',
			'Н' => 'N',
			'О' => 'O',
			'П' => 'P',
			'Р' => 'R',
			'С' => 'S',
			'Т' => 'T',
			'У' => 'U',
			'Ф' => 'F',
			'Х' => 'H',
			'Ц' => 'CZ',
			'Ч' => 'CH',
			'Ш' => 'SH',
			'Щ' => 'SHH',
			'Ь' => '`',
			'Ы' => 'Y',
			'Ъ' => '``',
			'Э' => 'E',
			'Ю' => 'YU',
			'Я' => 'YA',
			',' => ',',
			'.' => '.',
			'!' => '!',
			'?' => '?',
		);

		for ( $i = 0; $i < count( $arr_text ); $i++ ) {
			echo $arr_translit[ $arr_text[ $i ] ];
		}
	}
}

ol_todo_1();
?>

<h3>2. Сделайте функцию, которая возвращает множественное или единственное число существительного. Пример: 1 яблоко, 2 (3, 4) яблока, 5 яблок. Функция первым параметром принимает число, а следующие 3 параметра — форма для единственного числа, для чисел два, три, четыре и для чисел, больших четырех, например, func(3, 'яблоко', 'яблока', 'яблок').</h3>

<?php
function ol_todo_2( $num, $world1, $world2, $world3 ) {
	if ( 1 === $num ) {
		echo $num . ' ' . $world1;
	} elseif ( 2 <= $num && $num <= 4 ) {
		echo $num . ' ' . $world2;
	} else {
		echo $num . ' ' . $world3;
	}
}

ol_todo_2( 1, 'яблоко', 'яблока', 'яблок' );
?>

<h3>3. Найдите все счастливые билеты. Счастливый билет - это билет, в котором сумма первых трех цифр его номера равна сумме вторых трех цифр его номера.</h3>

<?php
function ol_todo_3() {
	for ( $i = 100000; $i < 150000; $i++ ) {
		if ( get_ol_sum_numbers( mb_substr( $i, 0, 3 ) ) === get_ol_sum_numbers( mb_substr( $i, 3, 5 ) ) ) {
			echo $i . ' ';
		}
	}
}

function get_ol_sum_numbers( $num ) {
	return array_sum( str_split( $num ) );
}

ol_todo_3();
?>

<h3>4. Дружественные числа - два различных числа, для которых сумма всех собственных делителей первого числа равна второму числу и наоборот, сумма всех собственных делителей второго числа равна первому числу.

Например, 220 и 284. Делители для 220 это 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 и 110, сумма делителей равна 284. Делители для 284 это 1, 2, 4, 71 и 142, их сумма равна 220.

Задача: найдите все пары дружественных чисел в промежутке от 1 до 10000. Для этого сделайте вспомогательную функцию, которая находит все делители числа и возвращает их в виде массива. Также сделайте функцию, которая параметром принимает массив, а возвращает его сумму.</h3>

<?php
function ol_todo_4() {
	for ( $i = 0; $i < 10000; $i++ ) {
		$arr1 = get_ol_number_divisors( $i );
		$arr2 = array();

		if ( 1 <= count( $arr1 ) ) {
			$sum_arr1 = get_ol_array_sum( $arr1 );
		}

		if ( 1 < $sum_arr1 ) {
			$arr2 = get_ol_number_divisors( $sum_arr1 );
			$sum_arr2 = get_ol_array_sum( $arr2 );

			if ( $i === $sum_arr2 && $i !== $sum_arr1 ) {
				echo $i . ' i ' . $sum_arr1 . ' дружественные числа <br>';
			}
		}
	}
}

function get_ol_number_divisors( $num ) {
	$arr = [];
	
	for ( $j = 1; $j < $num; $j++ ) {
		if ( 0 === $num % $j ) {
			$arr[] = $j;
		}
	}

	return $arr;
}

function get_ol_array_sum( $arr ) {
	return array_sum( $arr );
}


ol_todo_4();
?>
